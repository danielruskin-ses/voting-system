// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vote_server.proto
#ifndef GRPC_vote_5fserver_2eproto__INCLUDED
#define GRPC_vote_5fserver_2eproto__INCLUDED

#include "vote_server.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

class VoteServer final {
 public:
  static constexpr char const* service_full_name() {
    return "VoteServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetElectionMetadata(::grpc::ClientContext* context, const ::Empty& request, ::ElectionMetadata* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ElectionMetadata>> AsyncGetElectionMetadata(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ElectionMetadata>>(AsyncGetElectionMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ElectionMetadata>> PrepareAsyncGetElectionMetadata(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ElectionMetadata>>(PrepareAsyncGetElectionMetadataRaw(context, request, cq));
    }
    virtual ::grpc::Status CastProposedBallot(::grpc::ClientContext* context, const ::ProposedBallot& request, ::RecordedBallot* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RecordedBallot>> AsyncCastProposedBallot(::grpc::ClientContext* context, const ::ProposedBallot& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RecordedBallot>>(AsyncCastProposedBallotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RecordedBallot>> PrepareAsyncCastProposedBallot(::grpc::ClientContext* context, const ::ProposedBallot& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RecordedBallot>>(PrepareAsyncCastProposedBallotRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetElectionMetadata(::grpc::ClientContext* context, const ::Empty* request, ::ElectionMetadata* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CastProposedBallot(::grpc::ClientContext* context, const ::ProposedBallot* request, ::RecordedBallot* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ElectionMetadata>* AsyncGetElectionMetadataRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ElectionMetadata>* PrepareAsyncGetElectionMetadataRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RecordedBallot>* AsyncCastProposedBallotRaw(::grpc::ClientContext* context, const ::ProposedBallot& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RecordedBallot>* PrepareAsyncCastProposedBallotRaw(::grpc::ClientContext* context, const ::ProposedBallot& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetElectionMetadata(::grpc::ClientContext* context, const ::Empty& request, ::ElectionMetadata* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ElectionMetadata>> AsyncGetElectionMetadata(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ElectionMetadata>>(AsyncGetElectionMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ElectionMetadata>> PrepareAsyncGetElectionMetadata(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ElectionMetadata>>(PrepareAsyncGetElectionMetadataRaw(context, request, cq));
    }
    ::grpc::Status CastProposedBallot(::grpc::ClientContext* context, const ::ProposedBallot& request, ::RecordedBallot* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RecordedBallot>> AsyncCastProposedBallot(::grpc::ClientContext* context, const ::ProposedBallot& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RecordedBallot>>(AsyncCastProposedBallotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RecordedBallot>> PrepareAsyncCastProposedBallot(::grpc::ClientContext* context, const ::ProposedBallot& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RecordedBallot>>(PrepareAsyncCastProposedBallotRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetElectionMetadata(::grpc::ClientContext* context, const ::Empty* request, ::ElectionMetadata* response, std::function<void(::grpc::Status)>) override;
      void CastProposedBallot(::grpc::ClientContext* context, const ::ProposedBallot* request, ::RecordedBallot* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ElectionMetadata>* AsyncGetElectionMetadataRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ElectionMetadata>* PrepareAsyncGetElectionMetadataRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RecordedBallot>* AsyncCastProposedBallotRaw(::grpc::ClientContext* context, const ::ProposedBallot& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RecordedBallot>* PrepareAsyncCastProposedBallotRaw(::grpc::ClientContext* context, const ::ProposedBallot& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetElectionMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_CastProposedBallot_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetElectionMetadata(::grpc::ServerContext* context, const ::Empty* request, ::ElectionMetadata* response);
    virtual ::grpc::Status CastProposedBallot(::grpc::ServerContext* context, const ::ProposedBallot* request, ::RecordedBallot* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetElectionMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetElectionMetadata() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetElectionMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElectionMetadata(::grpc::ServerContext* context, const ::Empty* request, ::ElectionMetadata* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetElectionMetadata(::grpc::ServerContext* context, ::Empty* request, ::grpc::ServerAsyncResponseWriter< ::ElectionMetadata>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CastProposedBallot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CastProposedBallot() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CastProposedBallot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CastProposedBallot(::grpc::ServerContext* context, const ::ProposedBallot* request, ::RecordedBallot* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCastProposedBallot(::grpc::ServerContext* context, ::ProposedBallot* request, ::grpc::ServerAsyncResponseWriter< ::RecordedBallot>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetElectionMetadata<WithAsyncMethod_CastProposedBallot<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetElectionMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetElectionMetadata() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetElectionMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElectionMetadata(::grpc::ServerContext* context, const ::Empty* request, ::ElectionMetadata* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CastProposedBallot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CastProposedBallot() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CastProposedBallot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CastProposedBallot(::grpc::ServerContext* context, const ::ProposedBallot* request, ::RecordedBallot* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetElectionMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetElectionMetadata() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetElectionMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElectionMetadata(::grpc::ServerContext* context, const ::Empty* request, ::ElectionMetadata* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetElectionMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CastProposedBallot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CastProposedBallot() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CastProposedBallot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CastProposedBallot(::grpc::ServerContext* context, const ::ProposedBallot* request, ::RecordedBallot* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCastProposedBallot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetElectionMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetElectionMetadata() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::Empty, ::ElectionMetadata>(std::bind(&WithStreamedUnaryMethod_GetElectionMetadata<BaseClass>::StreamedGetElectionMetadata, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetElectionMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetElectionMetadata(::grpc::ServerContext* context, const ::Empty* request, ::ElectionMetadata* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetElectionMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Empty,::ElectionMetadata>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CastProposedBallot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CastProposedBallot() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::ProposedBallot, ::RecordedBallot>(std::bind(&WithStreamedUnaryMethod_CastProposedBallot<BaseClass>::StreamedCastProposedBallot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CastProposedBallot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CastProposedBallot(::grpc::ServerContext* context, const ::ProposedBallot* request, ::RecordedBallot* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCastProposedBallot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ProposedBallot,::RecordedBallot>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetElectionMetadata<WithStreamedUnaryMethod_CastProposedBallot<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetElectionMetadata<WithStreamedUnaryMethod_CastProposedBallot<Service > > StreamedService;
};


#endif  // GRPC_vote_5fserver_2eproto__INCLUDED
