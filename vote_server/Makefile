######## PARAMS

# nanopb path
NANOPB_PATH=../lib/nanopb

# Compiler/linker flags
CXX = g++
CXX_FLAGS += -pthread -I../shared_cpp -I/usr/local/include -I/usr/include -I$(NANOPB_PATH) -std=c++14
LD_FLAGS += -L/usr/local/lib

# Source file paths (protos, CPP)
PROTOS_PATH = ../protos
CPP_PATH = .
SHARED_CPP_PATH = ../shared_cpp

# Output file paths (final bin, build files)
BIN = vote_server
BUILD_DIR = ./build

######### DERIVED
# Place to put generated, shared files
GEN_DIR = $(BUILD_DIR)/gen
SHARED_DIR = $(BUILD_DIR)/shared

# List of CPP files, proto files
CPP = $(shell find $(CPP_PATH) -name "*.cpp")
SHARED_CPP_SOURCE = $(shell find $(SHARED_CPP_PATH) -name "*.cpp")
PROTOS_SOURCE = $(shell find $(PROTOS_PATH) -name "*.proto")

# Intermediate variable, then list of CPP files that are generated by compiling proto files
SHARED_CPP = $(subst $(SHARED_CPP_PATH)/,$(SHARED_DIR)/,$(SHARED_CPP_SOURCE))
PROTOS_SOURCE_MOD = $(subst $(PROTOS_PATH)/,$(GEN_DIR)/pb/,$(PROTOS_SOURCE))
PROTOS_CPP = $(PROTOS_SOURCE_MOD:%.proto=%.pb.cpp)

# List of object files that should be included in final binary, plus their dependencies
OBJ = $(CPP:%.cpp=$(BUILD_DIR)/%.o)
OBJ += $(SHARED_CPP:%.cpp=%.o)
OBJ += $(PROTOS_CPP:%.pb.cpp=%.pb.o)
OBJ += $(GEN_DIR)/nanopb/pb_encode.o
OBJ += $(GEN_DIR)/nanopb/pb_decode.o 
OBJ += $(GEN_DIR)/nanopb/pb_common.o
DEP = $(OBJ:%.o=%.d)

# Final output rule - compile the binary 
$(BIN) : $(BUILD_DIR)/$(BIN)
$(BUILD_DIR)/$(BIN) : $(OBJ)
	mkdir -p $(@D)
	$(CXX) $(CXX_FLAGS) $^ -o $@

-include $(DEP)

# Compile shared files (take from shared path, put into build/shared)
$(SHARED_DIR)/%.o: $(SHARED_CPP_PATH)/%.cpp
	mkdir -p $(@D)
	$(CXX) $(CXX_FLAGS) -MMD -c $< -o $@

# Compile protobuf files (take from proto path, put into build/gen/pb)
$(GEN_DIR)/pb/%.pb.c: $(PROTOS_PATH)/%.proto
	mkdir -p $(@D)
	protoc --plugin=protoc-gen-nanopb=$(NANOPB_PATH)/generator/protoc-gen-nanopb --proto_path $(^D) --nanopb_out=$(@D) $^

# Copy over nanopb files (take from nanopb, but into build/gen/nanopb)
$(GEN_DIR)/nanopb/%.c: $(NANOPB_PATH)/%.c
	mkdir -p $(@D)
	cp $^ $@

# Compile gen files (C)
$(GEN_DIR)/%.o : $(GEN_DIR)/%.c
	mkdir -p $(@D)
	$(CXX) $(CXX_FLAGS) -MMD -c $< -o $@

# Compile all other files (CPP)
$(BUILD_DIR)/%.o : %.cpp
	mkdir -p $(@D)
	$(CXX) $(CXX_FLAGS) -MMD -c $< -o $@

.PHONY : clean
clean :
	rm -fr $(BUILD_DIR) protos_compiled pb nanopb
