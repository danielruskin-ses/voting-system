// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared.proto

#ifndef PROTOBUF_INCLUDED_shared_2eproto
#define PROTOBUF_INCLUDED_shared_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_shared_2eproto 

namespace protobuf_shared_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_shared_2eproto
class Candidate;
class CandidateDefaultTypeInternal;
extern CandidateDefaultTypeInternal _Candidate_default_instance_;
class CandidateChoice;
class CandidateChoiceDefaultTypeInternal;
extern CandidateChoiceDefaultTypeInternal _CandidateChoice_default_instance_;
class Election;
class ElectionDefaultTypeInternal;
extern ElectionDefaultTypeInternal _Election_default_instance_;
class ElectionMetadata;
class ElectionMetadataDefaultTypeInternal;
extern ElectionMetadataDefaultTypeInternal _ElectionMetadata_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class ProposedBallot;
class ProposedBallotDefaultTypeInternal;
extern ProposedBallotDefaultTypeInternal _ProposedBallot_default_instance_;
class RecordedBallot;
class RecordedBallotDefaultTypeInternal;
extern RecordedBallotDefaultTypeInternal _RecordedBallot_default_instance_;
class Signature;
class SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
namespace google {
namespace protobuf {
template<> ::Candidate* Arena::CreateMaybeMessage<::Candidate>(Arena*);
template<> ::CandidateChoice* Arena::CreateMaybeMessage<::CandidateChoice>(Arena*);
template<> ::Election* Arena::CreateMaybeMessage<::Election>(Arena*);
template<> ::ElectionMetadata* Arena::CreateMaybeMessage<::ElectionMetadata>(Arena*);
template<> ::Empty* Arena::CreateMaybeMessage<::Empty>(Arena*);
template<> ::ProposedBallot* Arena::CreateMaybeMessage<::ProposedBallot>(Arena*);
template<> ::RecordedBallot* Arena::CreateMaybeMessage<::RecordedBallot>(Arena*);
template<> ::Signature* Arena::CreateMaybeMessage<::Signature>(Arena*);
template<> ::Timestamp* Arena::CreateMaybeMessage<::Timestamp>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(NULL);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Timestamp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Timestamp) */ {
 public:
  Timestamp();
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Timestamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Timestamp* other);
  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Timestamp* New() const final {
    return CreateMaybeMessage<Timestamp>(NULL);
  }

  Timestamp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 epoch = 1;
  void clear_epoch();
  static const int kEpochFieldNumber = 1;
  ::google::protobuf::int32 epoch() const;
  void set_epoch(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Timestamp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 epoch_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Signature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Signature) */ {
 public:
  Signature();
  virtual ~Signature();

  Signature(const Signature& from);

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Signature(Signature&& from) noexcept
    : Signature() {
    *this = ::std::move(from);
  }

  inline Signature& operator=(Signature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Signature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Signature* other);
  friend void swap(Signature& a, Signature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Signature* New() const final {
    return CreateMaybeMessage<Signature>(NULL);
  }

  Signature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Signature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Signature& from);
  void MergeFrom(const Signature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string signature = 1;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:Signature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Candidate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Candidate) */ {
 public:
  Candidate();
  virtual ~Candidate();

  Candidate(const Candidate& from);

  inline Candidate& operator=(const Candidate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Candidate(Candidate&& from) noexcept
    : Candidate() {
    *this = ::std::move(from);
  }

  inline Candidate& operator=(Candidate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Candidate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Candidate* internal_default_instance() {
    return reinterpret_cast<const Candidate*>(
               &_Candidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Candidate* other);
  friend void swap(Candidate& a, Candidate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Candidate* New() const final {
    return CreateMaybeMessage<Candidate>(NULL);
  }

  Candidate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Candidate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Candidate& from);
  void MergeFrom(const Candidate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Candidate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Candidate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Election : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Election) */ {
 public:
  Election();
  virtual ~Election();

  Election(const Election& from);

  inline Election& operator=(const Election& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Election(Election&& from) noexcept
    : Election() {
    *this = ::std::move(from);
  }

  inline Election& operator=(Election&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Election& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Election* internal_default_instance() {
    return reinterpret_cast<const Election*>(
               &_Election_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Election* other);
  friend void swap(Election& a, Election& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Election* New() const final {
    return CreateMaybeMessage<Election>(NULL);
  }

  Election* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Election>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Election& from);
  void MergeFrom(const Election& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Election* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 1;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .Candidate candidateOptions = 2;
  bool has_candidateoptions() const;
  void clear_candidateoptions();
  static const int kCandidateOptionsFieldNumber = 2;
  private:
  const ::Candidate& _internal_candidateoptions() const;
  public:
  const ::Candidate& candidateoptions() const;
  ::Candidate* release_candidateoptions();
  ::Candidate* mutable_candidateoptions();
  void set_allocated_candidateoptions(::Candidate* candidateoptions);

  // @@protoc_insertion_point(class_scope:Election)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::Candidate* candidateoptions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CandidateChoice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CandidateChoice) */ {
 public:
  CandidateChoice();
  virtual ~CandidateChoice();

  CandidateChoice(const CandidateChoice& from);

  inline CandidateChoice& operator=(const CandidateChoice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CandidateChoice(CandidateChoice&& from) noexcept
    : CandidateChoice() {
    *this = ::std::move(from);
  }

  inline CandidateChoice& operator=(CandidateChoice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CandidateChoice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CandidateChoice* internal_default_instance() {
    return reinterpret_cast<const CandidateChoice*>(
               &_CandidateChoice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CandidateChoice* other);
  friend void swap(CandidateChoice& a, CandidateChoice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CandidateChoice* New() const final {
    return CreateMaybeMessage<CandidateChoice>(NULL);
  }

  CandidateChoice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CandidateChoice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CandidateChoice& from);
  void MergeFrom(const CandidateChoice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandidateChoice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Election election = 1;
  bool has_election() const;
  void clear_election();
  static const int kElectionFieldNumber = 1;
  private:
  const ::Election& _internal_election() const;
  public:
  const ::Election& election() const;
  ::Election* release_election();
  ::Election* mutable_election();
  void set_allocated_election(::Election* election);

  // .Candidate candidateChoice = 2;
  bool has_candidatechoice() const;
  void clear_candidatechoice();
  static const int kCandidateChoiceFieldNumber = 2;
  private:
  const ::Candidate& _internal_candidatechoice() const;
  public:
  const ::Candidate& candidatechoice() const;
  ::Candidate* release_candidatechoice();
  ::Candidate* mutable_candidatechoice();
  void set_allocated_candidatechoice(::Candidate* candidatechoice);

  // @@protoc_insertion_point(class_scope:CandidateChoice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Election* election_;
  ::Candidate* candidatechoice_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElectionMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ElectionMetadata) */ {
 public:
  ElectionMetadata();
  virtual ~ElectionMetadata();

  ElectionMetadata(const ElectionMetadata& from);

  inline ElectionMetadata& operator=(const ElectionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElectionMetadata(ElectionMetadata&& from) noexcept
    : ElectionMetadata() {
    *this = ::std::move(from);
  }

  inline ElectionMetadata& operator=(ElectionMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElectionMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElectionMetadata* internal_default_instance() {
    return reinterpret_cast<const ElectionMetadata*>(
               &_ElectionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ElectionMetadata* other);
  friend void swap(ElectionMetadata& a, ElectionMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElectionMetadata* New() const final {
    return CreateMaybeMessage<ElectionMetadata>(NULL);
  }

  ElectionMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElectionMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElectionMetadata& from);
  void MergeFrom(const ElectionMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElectionMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Election elections = 3;
  int elections_size() const;
  void clear_elections();
  static const int kElectionsFieldNumber = 3;
  ::Election* mutable_elections(int index);
  ::google::protobuf::RepeatedPtrField< ::Election >*
      mutable_elections();
  const ::Election& elections(int index) const;
  ::Election* add_elections();
  const ::google::protobuf::RepeatedPtrField< ::Election >&
      elections() const;

  // .Timestamp electionStart = 1;
  bool has_electionstart() const;
  void clear_electionstart();
  static const int kElectionStartFieldNumber = 1;
  private:
  const ::Timestamp& _internal_electionstart() const;
  public:
  const ::Timestamp& electionstart() const;
  ::Timestamp* release_electionstart();
  ::Timestamp* mutable_electionstart();
  void set_allocated_electionstart(::Timestamp* electionstart);

  // .Timestamp electionEnd = 2;
  bool has_electionend() const;
  void clear_electionend();
  static const int kElectionEndFieldNumber = 2;
  private:
  const ::Timestamp& _internal_electionend() const;
  public:
  const ::Timestamp& electionend() const;
  ::Timestamp* release_electionend();
  ::Timestamp* mutable_electionend();
  void set_allocated_electionend(::Timestamp* electionend);

  // .Signature signature = 4;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 4;
  private:
  const ::Signature& _internal_signature() const;
  public:
  const ::Signature& signature() const;
  ::Signature* release_signature();
  ::Signature* mutable_signature();
  void set_allocated_signature(::Signature* signature);

  // @@protoc_insertion_point(class_scope:ElectionMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Election > elections_;
  ::Timestamp* electionstart_;
  ::Timestamp* electionend_;
  ::Signature* signature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProposedBallot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProposedBallot) */ {
 public:
  ProposedBallot();
  virtual ~ProposedBallot();

  ProposedBallot(const ProposedBallot& from);

  inline ProposedBallot& operator=(const ProposedBallot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProposedBallot(ProposedBallot&& from) noexcept
    : ProposedBallot() {
    *this = ::std::move(from);
  }

  inline ProposedBallot& operator=(ProposedBallot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProposedBallot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProposedBallot* internal_default_instance() {
    return reinterpret_cast<const ProposedBallot*>(
               &_ProposedBallot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ProposedBallot* other);
  friend void swap(ProposedBallot& a, ProposedBallot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProposedBallot* New() const final {
    return CreateMaybeMessage<ProposedBallot>(NULL);
  }

  ProposedBallot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProposedBallot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProposedBallot& from);
  void MergeFrom(const ProposedBallot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposedBallot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CandidateChoice candidateChoices = 3;
  int candidatechoices_size() const;
  void clear_candidatechoices();
  static const int kCandidateChoicesFieldNumber = 3;
  ::CandidateChoice* mutable_candidatechoices(int index);
  ::google::protobuf::RepeatedPtrField< ::CandidateChoice >*
      mutable_candidatechoices();
  const ::CandidateChoice& candidatechoices(int index) const;
  ::CandidateChoice* add_candidatechoices();
  const ::google::protobuf::RepeatedPtrField< ::CandidateChoice >&
      candidatechoices() const;

  // .Timestamp castAt = 2;
  bool has_castat() const;
  void clear_castat();
  static const int kCastAtFieldNumber = 2;
  private:
  const ::Timestamp& _internal_castat() const;
  public:
  const ::Timestamp& castat() const;
  ::Timestamp* release_castat();
  ::Timestamp* mutable_castat();
  void set_allocated_castat(::Timestamp* castat);

  // .Signature voterDeviceSignature = 4;
  bool has_voterdevicesignature() const;
  void clear_voterdevicesignature();
  static const int kVoterDeviceSignatureFieldNumber = 4;
  private:
  const ::Signature& _internal_voterdevicesignature() const;
  public:
  const ::Signature& voterdevicesignature() const;
  ::Signature* release_voterdevicesignature();
  ::Signature* mutable_voterdevicesignature();
  void set_allocated_voterdevicesignature(::Signature* voterdevicesignature);

  // int32 voterDeviceId = 1;
  void clear_voterdeviceid();
  static const int kVoterDeviceIdFieldNumber = 1;
  ::google::protobuf::int32 voterdeviceid() const;
  void set_voterdeviceid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProposedBallot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CandidateChoice > candidatechoices_;
  ::Timestamp* castat_;
  ::Signature* voterdevicesignature_;
  ::google::protobuf::int32 voterdeviceid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecordedBallot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RecordedBallot) */ {
 public:
  RecordedBallot();
  virtual ~RecordedBallot();

  RecordedBallot(const RecordedBallot& from);

  inline RecordedBallot& operator=(const RecordedBallot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordedBallot(RecordedBallot&& from) noexcept
    : RecordedBallot() {
    *this = ::std::move(from);
  }

  inline RecordedBallot& operator=(RecordedBallot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordedBallot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordedBallot* internal_default_instance() {
    return reinterpret_cast<const RecordedBallot*>(
               &_RecordedBallot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(RecordedBallot* other);
  friend void swap(RecordedBallot& a, RecordedBallot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordedBallot* New() const final {
    return CreateMaybeMessage<RecordedBallot>(NULL);
  }

  RecordedBallot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecordedBallot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecordedBallot& from);
  void MergeFrom(const RecordedBallot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordedBallot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ProposedBallot proposedBallot = 1;
  bool has_proposedballot() const;
  void clear_proposedballot();
  static const int kProposedBallotFieldNumber = 1;
  private:
  const ::ProposedBallot& _internal_proposedballot() const;
  public:
  const ::ProposedBallot& proposedballot() const;
  ::ProposedBallot* release_proposedballot();
  ::ProposedBallot* mutable_proposedballot();
  void set_allocated_proposedballot(::ProposedBallot* proposedballot);

  // .Timestamp recordedAt = 2;
  bool has_recordedat() const;
  void clear_recordedat();
  static const int kRecordedAtFieldNumber = 2;
  private:
  const ::Timestamp& _internal_recordedat() const;
  public:
  const ::Timestamp& recordedat() const;
  ::Timestamp* release_recordedat();
  ::Timestamp* mutable_recordedat();
  void set_allocated_recordedat(::Timestamp* recordedat);

  // .Signature voteServerSignature = 3;
  bool has_voteserversignature() const;
  void clear_voteserversignature();
  static const int kVoteServerSignatureFieldNumber = 3;
  private:
  const ::Signature& _internal_voteserversignature() const;
  public:
  const ::Signature& voteserversignature() const;
  ::Signature* release_voteserversignature();
  ::Signature* mutable_voteserversignature();
  void set_allocated_voteserversignature(::Signature* voteserversignature);

  // @@protoc_insertion_point(class_scope:RecordedBallot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ProposedBallot* proposedballot_;
  ::Timestamp* recordedat_;
  ::Signature* voteserversignature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// Timestamp

// int32 epoch = 1;
inline void Timestamp::clear_epoch() {
  epoch_ = 0;
}
inline ::google::protobuf::int32 Timestamp::epoch() const {
  // @@protoc_insertion_point(field_get:Timestamp.epoch)
  return epoch_;
}
inline void Timestamp::set_epoch(::google::protobuf::int32 value) {
  
  epoch_ = value;
  // @@protoc_insertion_point(field_set:Timestamp.epoch)
}

// -------------------------------------------------------------------

// Signature

// string signature = 1;
inline void Signature::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Signature::signature() const {
  // @@protoc_insertion_point(field_get:Signature.signature)
  return signature_.GetNoArena();
}
inline void Signature::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Signature.signature)
}
#if LANG_CXX11
inline void Signature::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Signature.signature)
}
#endif
inline void Signature::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Signature.signature)
}
inline void Signature::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Signature.signature)
}
inline ::std::string* Signature::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:Signature.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Signature::release_signature() {
  // @@protoc_insertion_point(field_release:Signature.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Signature::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:Signature.signature)
}

// -------------------------------------------------------------------

// Candidate

// string name = 1;
inline void Candidate::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Candidate::name() const {
  // @@protoc_insertion_point(field_get:Candidate.name)
  return name_.GetNoArena();
}
inline void Candidate::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Candidate.name)
}
#if LANG_CXX11
inline void Candidate::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Candidate.name)
}
#endif
inline void Candidate::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Candidate.name)
}
inline void Candidate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Candidate.name)
}
inline ::std::string* Candidate::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Candidate.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Candidate::release_name() {
  // @@protoc_insertion_point(field_release:Candidate.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Candidate::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Candidate.name)
}

// int32 id = 2;
inline void Candidate::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Candidate::id() const {
  // @@protoc_insertion_point(field_get:Candidate.id)
  return id_;
}
inline void Candidate::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Candidate.id)
}

// -------------------------------------------------------------------

// Election

// string description = 1;
inline void Election::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Election::description() const {
  // @@protoc_insertion_point(field_get:Election.description)
  return description_.GetNoArena();
}
inline void Election::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Election.description)
}
#if LANG_CXX11
inline void Election::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Election.description)
}
#endif
inline void Election::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Election.description)
}
inline void Election::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Election.description)
}
inline ::std::string* Election::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:Election.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Election::release_description() {
  // @@protoc_insertion_point(field_release:Election.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Election::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:Election.description)
}

// .Candidate candidateOptions = 2;
inline bool Election::has_candidateoptions() const {
  return this != internal_default_instance() && candidateoptions_ != NULL;
}
inline void Election::clear_candidateoptions() {
  if (GetArenaNoVirtual() == NULL && candidateoptions_ != NULL) {
    delete candidateoptions_;
  }
  candidateoptions_ = NULL;
}
inline const ::Candidate& Election::_internal_candidateoptions() const {
  return *candidateoptions_;
}
inline const ::Candidate& Election::candidateoptions() const {
  const ::Candidate* p = candidateoptions_;
  // @@protoc_insertion_point(field_get:Election.candidateOptions)
  return p != NULL ? *p : *reinterpret_cast<const ::Candidate*>(
      &::_Candidate_default_instance_);
}
inline ::Candidate* Election::release_candidateoptions() {
  // @@protoc_insertion_point(field_release:Election.candidateOptions)
  
  ::Candidate* temp = candidateoptions_;
  candidateoptions_ = NULL;
  return temp;
}
inline ::Candidate* Election::mutable_candidateoptions() {
  
  if (candidateoptions_ == NULL) {
    auto* p = CreateMaybeMessage<::Candidate>(GetArenaNoVirtual());
    candidateoptions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Election.candidateOptions)
  return candidateoptions_;
}
inline void Election::set_allocated_candidateoptions(::Candidate* candidateoptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete candidateoptions_;
  }
  if (candidateoptions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      candidateoptions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, candidateoptions, submessage_arena);
    }
    
  } else {
    
  }
  candidateoptions_ = candidateoptions;
  // @@protoc_insertion_point(field_set_allocated:Election.candidateOptions)
}

// -------------------------------------------------------------------

// CandidateChoice

// .Election election = 1;
inline bool CandidateChoice::has_election() const {
  return this != internal_default_instance() && election_ != NULL;
}
inline void CandidateChoice::clear_election() {
  if (GetArenaNoVirtual() == NULL && election_ != NULL) {
    delete election_;
  }
  election_ = NULL;
}
inline const ::Election& CandidateChoice::_internal_election() const {
  return *election_;
}
inline const ::Election& CandidateChoice::election() const {
  const ::Election* p = election_;
  // @@protoc_insertion_point(field_get:CandidateChoice.election)
  return p != NULL ? *p : *reinterpret_cast<const ::Election*>(
      &::_Election_default_instance_);
}
inline ::Election* CandidateChoice::release_election() {
  // @@protoc_insertion_point(field_release:CandidateChoice.election)
  
  ::Election* temp = election_;
  election_ = NULL;
  return temp;
}
inline ::Election* CandidateChoice::mutable_election() {
  
  if (election_ == NULL) {
    auto* p = CreateMaybeMessage<::Election>(GetArenaNoVirtual());
    election_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CandidateChoice.election)
  return election_;
}
inline void CandidateChoice::set_allocated_election(::Election* election) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete election_;
  }
  if (election) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      election = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, election, submessage_arena);
    }
    
  } else {
    
  }
  election_ = election;
  // @@protoc_insertion_point(field_set_allocated:CandidateChoice.election)
}

// .Candidate candidateChoice = 2;
inline bool CandidateChoice::has_candidatechoice() const {
  return this != internal_default_instance() && candidatechoice_ != NULL;
}
inline void CandidateChoice::clear_candidatechoice() {
  if (GetArenaNoVirtual() == NULL && candidatechoice_ != NULL) {
    delete candidatechoice_;
  }
  candidatechoice_ = NULL;
}
inline const ::Candidate& CandidateChoice::_internal_candidatechoice() const {
  return *candidatechoice_;
}
inline const ::Candidate& CandidateChoice::candidatechoice() const {
  const ::Candidate* p = candidatechoice_;
  // @@protoc_insertion_point(field_get:CandidateChoice.candidateChoice)
  return p != NULL ? *p : *reinterpret_cast<const ::Candidate*>(
      &::_Candidate_default_instance_);
}
inline ::Candidate* CandidateChoice::release_candidatechoice() {
  // @@protoc_insertion_point(field_release:CandidateChoice.candidateChoice)
  
  ::Candidate* temp = candidatechoice_;
  candidatechoice_ = NULL;
  return temp;
}
inline ::Candidate* CandidateChoice::mutable_candidatechoice() {
  
  if (candidatechoice_ == NULL) {
    auto* p = CreateMaybeMessage<::Candidate>(GetArenaNoVirtual());
    candidatechoice_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CandidateChoice.candidateChoice)
  return candidatechoice_;
}
inline void CandidateChoice::set_allocated_candidatechoice(::Candidate* candidatechoice) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete candidatechoice_;
  }
  if (candidatechoice) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      candidatechoice = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, candidatechoice, submessage_arena);
    }
    
  } else {
    
  }
  candidatechoice_ = candidatechoice;
  // @@protoc_insertion_point(field_set_allocated:CandidateChoice.candidateChoice)
}

// -------------------------------------------------------------------

// ElectionMetadata

// .Timestamp electionStart = 1;
inline bool ElectionMetadata::has_electionstart() const {
  return this != internal_default_instance() && electionstart_ != NULL;
}
inline void ElectionMetadata::clear_electionstart() {
  if (GetArenaNoVirtual() == NULL && electionstart_ != NULL) {
    delete electionstart_;
  }
  electionstart_ = NULL;
}
inline const ::Timestamp& ElectionMetadata::_internal_electionstart() const {
  return *electionstart_;
}
inline const ::Timestamp& ElectionMetadata::electionstart() const {
  const ::Timestamp* p = electionstart_;
  // @@protoc_insertion_point(field_get:ElectionMetadata.electionStart)
  return p != NULL ? *p : *reinterpret_cast<const ::Timestamp*>(
      &::_Timestamp_default_instance_);
}
inline ::Timestamp* ElectionMetadata::release_electionstart() {
  // @@protoc_insertion_point(field_release:ElectionMetadata.electionStart)
  
  ::Timestamp* temp = electionstart_;
  electionstart_ = NULL;
  return temp;
}
inline ::Timestamp* ElectionMetadata::mutable_electionstart() {
  
  if (electionstart_ == NULL) {
    auto* p = CreateMaybeMessage<::Timestamp>(GetArenaNoVirtual());
    electionstart_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ElectionMetadata.electionStart)
  return electionstart_;
}
inline void ElectionMetadata::set_allocated_electionstart(::Timestamp* electionstart) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete electionstart_;
  }
  if (electionstart) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      electionstart = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, electionstart, submessage_arena);
    }
    
  } else {
    
  }
  electionstart_ = electionstart;
  // @@protoc_insertion_point(field_set_allocated:ElectionMetadata.electionStart)
}

// .Timestamp electionEnd = 2;
inline bool ElectionMetadata::has_electionend() const {
  return this != internal_default_instance() && electionend_ != NULL;
}
inline void ElectionMetadata::clear_electionend() {
  if (GetArenaNoVirtual() == NULL && electionend_ != NULL) {
    delete electionend_;
  }
  electionend_ = NULL;
}
inline const ::Timestamp& ElectionMetadata::_internal_electionend() const {
  return *electionend_;
}
inline const ::Timestamp& ElectionMetadata::electionend() const {
  const ::Timestamp* p = electionend_;
  // @@protoc_insertion_point(field_get:ElectionMetadata.electionEnd)
  return p != NULL ? *p : *reinterpret_cast<const ::Timestamp*>(
      &::_Timestamp_default_instance_);
}
inline ::Timestamp* ElectionMetadata::release_electionend() {
  // @@protoc_insertion_point(field_release:ElectionMetadata.electionEnd)
  
  ::Timestamp* temp = electionend_;
  electionend_ = NULL;
  return temp;
}
inline ::Timestamp* ElectionMetadata::mutable_electionend() {
  
  if (electionend_ == NULL) {
    auto* p = CreateMaybeMessage<::Timestamp>(GetArenaNoVirtual());
    electionend_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ElectionMetadata.electionEnd)
  return electionend_;
}
inline void ElectionMetadata::set_allocated_electionend(::Timestamp* electionend) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete electionend_;
  }
  if (electionend) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      electionend = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, electionend, submessage_arena);
    }
    
  } else {
    
  }
  electionend_ = electionend;
  // @@protoc_insertion_point(field_set_allocated:ElectionMetadata.electionEnd)
}

// repeated .Election elections = 3;
inline int ElectionMetadata::elections_size() const {
  return elections_.size();
}
inline void ElectionMetadata::clear_elections() {
  elections_.Clear();
}
inline ::Election* ElectionMetadata::mutable_elections(int index) {
  // @@protoc_insertion_point(field_mutable:ElectionMetadata.elections)
  return elections_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Election >*
ElectionMetadata::mutable_elections() {
  // @@protoc_insertion_point(field_mutable_list:ElectionMetadata.elections)
  return &elections_;
}
inline const ::Election& ElectionMetadata::elections(int index) const {
  // @@protoc_insertion_point(field_get:ElectionMetadata.elections)
  return elections_.Get(index);
}
inline ::Election* ElectionMetadata::add_elections() {
  // @@protoc_insertion_point(field_add:ElectionMetadata.elections)
  return elections_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Election >&
ElectionMetadata::elections() const {
  // @@protoc_insertion_point(field_list:ElectionMetadata.elections)
  return elections_;
}

// .Signature signature = 4;
inline bool ElectionMetadata::has_signature() const {
  return this != internal_default_instance() && signature_ != NULL;
}
inline void ElectionMetadata::clear_signature() {
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) {
    delete signature_;
  }
  signature_ = NULL;
}
inline const ::Signature& ElectionMetadata::_internal_signature() const {
  return *signature_;
}
inline const ::Signature& ElectionMetadata::signature() const {
  const ::Signature* p = signature_;
  // @@protoc_insertion_point(field_get:ElectionMetadata.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::Signature*>(
      &::_Signature_default_instance_);
}
inline ::Signature* ElectionMetadata::release_signature() {
  // @@protoc_insertion_point(field_release:ElectionMetadata.signature)
  
  ::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::Signature* ElectionMetadata::mutable_signature() {
  
  if (signature_ == NULL) {
    auto* p = CreateMaybeMessage<::Signature>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ElectionMetadata.signature)
  return signature_;
}
inline void ElectionMetadata::set_allocated_signature(::Signature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete signature_;
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    
  } else {
    
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:ElectionMetadata.signature)
}

// -------------------------------------------------------------------

// ProposedBallot

// int32 voterDeviceId = 1;
inline void ProposedBallot::clear_voterdeviceid() {
  voterdeviceid_ = 0;
}
inline ::google::protobuf::int32 ProposedBallot::voterdeviceid() const {
  // @@protoc_insertion_point(field_get:ProposedBallot.voterDeviceId)
  return voterdeviceid_;
}
inline void ProposedBallot::set_voterdeviceid(::google::protobuf::int32 value) {
  
  voterdeviceid_ = value;
  // @@protoc_insertion_point(field_set:ProposedBallot.voterDeviceId)
}

// .Timestamp castAt = 2;
inline bool ProposedBallot::has_castat() const {
  return this != internal_default_instance() && castat_ != NULL;
}
inline void ProposedBallot::clear_castat() {
  if (GetArenaNoVirtual() == NULL && castat_ != NULL) {
    delete castat_;
  }
  castat_ = NULL;
}
inline const ::Timestamp& ProposedBallot::_internal_castat() const {
  return *castat_;
}
inline const ::Timestamp& ProposedBallot::castat() const {
  const ::Timestamp* p = castat_;
  // @@protoc_insertion_point(field_get:ProposedBallot.castAt)
  return p != NULL ? *p : *reinterpret_cast<const ::Timestamp*>(
      &::_Timestamp_default_instance_);
}
inline ::Timestamp* ProposedBallot::release_castat() {
  // @@protoc_insertion_point(field_release:ProposedBallot.castAt)
  
  ::Timestamp* temp = castat_;
  castat_ = NULL;
  return temp;
}
inline ::Timestamp* ProposedBallot::mutable_castat() {
  
  if (castat_ == NULL) {
    auto* p = CreateMaybeMessage<::Timestamp>(GetArenaNoVirtual());
    castat_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ProposedBallot.castAt)
  return castat_;
}
inline void ProposedBallot::set_allocated_castat(::Timestamp* castat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete castat_;
  }
  if (castat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      castat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, castat, submessage_arena);
    }
    
  } else {
    
  }
  castat_ = castat;
  // @@protoc_insertion_point(field_set_allocated:ProposedBallot.castAt)
}

// repeated .CandidateChoice candidateChoices = 3;
inline int ProposedBallot::candidatechoices_size() const {
  return candidatechoices_.size();
}
inline void ProposedBallot::clear_candidatechoices() {
  candidatechoices_.Clear();
}
inline ::CandidateChoice* ProposedBallot::mutable_candidatechoices(int index) {
  // @@protoc_insertion_point(field_mutable:ProposedBallot.candidateChoices)
  return candidatechoices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CandidateChoice >*
ProposedBallot::mutable_candidatechoices() {
  // @@protoc_insertion_point(field_mutable_list:ProposedBallot.candidateChoices)
  return &candidatechoices_;
}
inline const ::CandidateChoice& ProposedBallot::candidatechoices(int index) const {
  // @@protoc_insertion_point(field_get:ProposedBallot.candidateChoices)
  return candidatechoices_.Get(index);
}
inline ::CandidateChoice* ProposedBallot::add_candidatechoices() {
  // @@protoc_insertion_point(field_add:ProposedBallot.candidateChoices)
  return candidatechoices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CandidateChoice >&
ProposedBallot::candidatechoices() const {
  // @@protoc_insertion_point(field_list:ProposedBallot.candidateChoices)
  return candidatechoices_;
}

// .Signature voterDeviceSignature = 4;
inline bool ProposedBallot::has_voterdevicesignature() const {
  return this != internal_default_instance() && voterdevicesignature_ != NULL;
}
inline void ProposedBallot::clear_voterdevicesignature() {
  if (GetArenaNoVirtual() == NULL && voterdevicesignature_ != NULL) {
    delete voterdevicesignature_;
  }
  voterdevicesignature_ = NULL;
}
inline const ::Signature& ProposedBallot::_internal_voterdevicesignature() const {
  return *voterdevicesignature_;
}
inline const ::Signature& ProposedBallot::voterdevicesignature() const {
  const ::Signature* p = voterdevicesignature_;
  // @@protoc_insertion_point(field_get:ProposedBallot.voterDeviceSignature)
  return p != NULL ? *p : *reinterpret_cast<const ::Signature*>(
      &::_Signature_default_instance_);
}
inline ::Signature* ProposedBallot::release_voterdevicesignature() {
  // @@protoc_insertion_point(field_release:ProposedBallot.voterDeviceSignature)
  
  ::Signature* temp = voterdevicesignature_;
  voterdevicesignature_ = NULL;
  return temp;
}
inline ::Signature* ProposedBallot::mutable_voterdevicesignature() {
  
  if (voterdevicesignature_ == NULL) {
    auto* p = CreateMaybeMessage<::Signature>(GetArenaNoVirtual());
    voterdevicesignature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ProposedBallot.voterDeviceSignature)
  return voterdevicesignature_;
}
inline void ProposedBallot::set_allocated_voterdevicesignature(::Signature* voterdevicesignature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete voterdevicesignature_;
  }
  if (voterdevicesignature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      voterdevicesignature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, voterdevicesignature, submessage_arena);
    }
    
  } else {
    
  }
  voterdevicesignature_ = voterdevicesignature;
  // @@protoc_insertion_point(field_set_allocated:ProposedBallot.voterDeviceSignature)
}

// -------------------------------------------------------------------

// RecordedBallot

// .ProposedBallot proposedBallot = 1;
inline bool RecordedBallot::has_proposedballot() const {
  return this != internal_default_instance() && proposedballot_ != NULL;
}
inline void RecordedBallot::clear_proposedballot() {
  if (GetArenaNoVirtual() == NULL && proposedballot_ != NULL) {
    delete proposedballot_;
  }
  proposedballot_ = NULL;
}
inline const ::ProposedBallot& RecordedBallot::_internal_proposedballot() const {
  return *proposedballot_;
}
inline const ::ProposedBallot& RecordedBallot::proposedballot() const {
  const ::ProposedBallot* p = proposedballot_;
  // @@protoc_insertion_point(field_get:RecordedBallot.proposedBallot)
  return p != NULL ? *p : *reinterpret_cast<const ::ProposedBallot*>(
      &::_ProposedBallot_default_instance_);
}
inline ::ProposedBallot* RecordedBallot::release_proposedballot() {
  // @@protoc_insertion_point(field_release:RecordedBallot.proposedBallot)
  
  ::ProposedBallot* temp = proposedballot_;
  proposedballot_ = NULL;
  return temp;
}
inline ::ProposedBallot* RecordedBallot::mutable_proposedballot() {
  
  if (proposedballot_ == NULL) {
    auto* p = CreateMaybeMessage<::ProposedBallot>(GetArenaNoVirtual());
    proposedballot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:RecordedBallot.proposedBallot)
  return proposedballot_;
}
inline void RecordedBallot::set_allocated_proposedballot(::ProposedBallot* proposedballot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete proposedballot_;
  }
  if (proposedballot) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      proposedballot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, proposedballot, submessage_arena);
    }
    
  } else {
    
  }
  proposedballot_ = proposedballot;
  // @@protoc_insertion_point(field_set_allocated:RecordedBallot.proposedBallot)
}

// .Timestamp recordedAt = 2;
inline bool RecordedBallot::has_recordedat() const {
  return this != internal_default_instance() && recordedat_ != NULL;
}
inline void RecordedBallot::clear_recordedat() {
  if (GetArenaNoVirtual() == NULL && recordedat_ != NULL) {
    delete recordedat_;
  }
  recordedat_ = NULL;
}
inline const ::Timestamp& RecordedBallot::_internal_recordedat() const {
  return *recordedat_;
}
inline const ::Timestamp& RecordedBallot::recordedat() const {
  const ::Timestamp* p = recordedat_;
  // @@protoc_insertion_point(field_get:RecordedBallot.recordedAt)
  return p != NULL ? *p : *reinterpret_cast<const ::Timestamp*>(
      &::_Timestamp_default_instance_);
}
inline ::Timestamp* RecordedBallot::release_recordedat() {
  // @@protoc_insertion_point(field_release:RecordedBallot.recordedAt)
  
  ::Timestamp* temp = recordedat_;
  recordedat_ = NULL;
  return temp;
}
inline ::Timestamp* RecordedBallot::mutable_recordedat() {
  
  if (recordedat_ == NULL) {
    auto* p = CreateMaybeMessage<::Timestamp>(GetArenaNoVirtual());
    recordedat_ = p;
  }
  // @@protoc_insertion_point(field_mutable:RecordedBallot.recordedAt)
  return recordedat_;
}
inline void RecordedBallot::set_allocated_recordedat(::Timestamp* recordedat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recordedat_;
  }
  if (recordedat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      recordedat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recordedat, submessage_arena);
    }
    
  } else {
    
  }
  recordedat_ = recordedat;
  // @@protoc_insertion_point(field_set_allocated:RecordedBallot.recordedAt)
}

// .Signature voteServerSignature = 3;
inline bool RecordedBallot::has_voteserversignature() const {
  return this != internal_default_instance() && voteserversignature_ != NULL;
}
inline void RecordedBallot::clear_voteserversignature() {
  if (GetArenaNoVirtual() == NULL && voteserversignature_ != NULL) {
    delete voteserversignature_;
  }
  voteserversignature_ = NULL;
}
inline const ::Signature& RecordedBallot::_internal_voteserversignature() const {
  return *voteserversignature_;
}
inline const ::Signature& RecordedBallot::voteserversignature() const {
  const ::Signature* p = voteserversignature_;
  // @@protoc_insertion_point(field_get:RecordedBallot.voteServerSignature)
  return p != NULL ? *p : *reinterpret_cast<const ::Signature*>(
      &::_Signature_default_instance_);
}
inline ::Signature* RecordedBallot::release_voteserversignature() {
  // @@protoc_insertion_point(field_release:RecordedBallot.voteServerSignature)
  
  ::Signature* temp = voteserversignature_;
  voteserversignature_ = NULL;
  return temp;
}
inline ::Signature* RecordedBallot::mutable_voteserversignature() {
  
  if (voteserversignature_ == NULL) {
    auto* p = CreateMaybeMessage<::Signature>(GetArenaNoVirtual());
    voteserversignature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:RecordedBallot.voteServerSignature)
  return voteserversignature_;
}
inline void RecordedBallot::set_allocated_voteserversignature(::Signature* voteserversignature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete voteserversignature_;
  }
  if (voteserversignature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      voteserversignature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, voteserversignature, submessage_arena);
    }
    
  } else {
    
  }
  voteserversignature_ = voteserversignature;
  // @@protoc_insertion_point(field_set_allocated:RecordedBallot.voteServerSignature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_shared_2eproto
